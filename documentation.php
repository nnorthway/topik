<?php
include 'config.php';
$title = "Documentation";
include 'header.php';
?>
<div class='hero is-medium'>
  <div class='hero-body'>
    <div class='container'>
      <h1 class='title'>Documentation</h1>
      <p class='subtitle'>
        These docs are updated constantly! Check the change log at the bottom
        of this page to see what got updated.
      </p>
    </div>
  </div>
</div>
<div class='section'>
  <div class='container' id='docs'>
    <div class='columns is-centered'>
      <div class='column is-10'>
        <section id='getting_started'>
          <h3 class='is-size-3'>Getting Started</h3>
          <p>
            To get started with using Topik, read the <a href='<?php echo $base; ?>readme.md'>readme</a> file.
            Then, come back here to read about installation.
          </p>
          <hr />
          <p class='subtitle'>Installation</p>
          <p>
            Install the unzipped package at the root of the URL. In <code>config.php</code>,
            set the <code>$blogName</code> variable to the name of your blog. Set
            the <code>$base</code> variable to the URL of your blog, leading with
            <code>http://</code> or <code>https://</code> and ending with a slash
            "/". That will be enough to get started.
          </p>
          <hr />
        </section>
        <section id='pages'>
          <h3 class='is-size-3'>Pages</h3>
          <p>
            Pages are stored at in the root folder. They are standard PHP pages.<br />
            Pages must have <code>config.php</code> included at the top, using the
            following code:
          </p>
          <code>include 'config.php';</code>
          <p>
            To use the Post class in a page, include the following line at the top,
            after the opening PHP tag:
          </p>
          <code>include 'Post.php';</code>
          <p>
            There are sections of the final HTML output that are not in the page
            file. This is done using the PHP <code>include</code> function. Examples
            of this include the 'header' file, which on this demo site, includes
            the HTML head tag and the navigation. The 'footer' file is the sibling
            to the 'header' file. The header file opens the 'main' HTML tag, and
            the footer file closes that tag, as well as the HTML tag. <br />
            Those files can be edited to include whatever is needed, including
            stylesheets, scripts, meta tags, and more. <br />
            Include the file <code>header.php</code> at the top of your page, after the
            call to include the Post class if you're using it. The file uses the
            <code>$title</code> variable to set the HTML <code>&lt;title&gt;</code> tag,
            so make sure you set that before calling the file to pass that in. If it's
            not set, the title will read just the <code>$blogName</code> variable
            set in <code>config.php</code>. Include the <code>footer.php</code> file
            at the bottom of your page to properly close everything off.
          </p>
          <hr />
          <p class='subtitle'>Page Structure</p>
          <p>
            The final code of a page should look like this:
          </p>
          <pre class='php'>
            <code>
&lt;?php
include 'config.php';

/*If you want to use the Post class*/
include 'Post.php';

$title = "Demo Page";
include 'header.php';
?&gt;
&lt;!--Page HTML/code goes here!--&gt;
include 'footer.php';
            </code>
          </pre>
        </section>
        <section id='post_class'>
          <h3 class='is-size-3'>The Post Class</h3>
          <p>
            The Post Class contains all of the functions to view a post, list
            posts, list recent posts, and get post information.
          </p>
          <hr />
          <p class='subtitle'>Variables</p>
          <p>
            Variables in the post class are not set within the class itself. They
            are generated by the post's content. The only exception to this rule
            is the posts directory, defined by <code>const Dir</code> at the top
            of the file.
          </p>
          <p class='subtitle'>Getting a post</p>
          <p>
            To retrieve a specific post, use the public function <code>get_post($file)</code>,
            where the <code>$file</code> parameter is the name of the file. The parameter
            does not require but does accept the value to end with '.php'. Do not
            pass the file name with the parent folder leading - just the file name
            is needed.
          </p>
          <pre class='php'>
            <code>
&lt;?php
$post = Post::get_post('2021-01-21-Getting-Started.php');
?&gt;
            </code>
          </pre>
          <p class='subtitle'>Getting Multiple Posts</p>
          <p>
            To retrieve multiple posts, use <code>get_recent_posts()</code> or
            <code>get_posts($x = 1)</code>. <br />
            <code>get_recent_posts()</code> will return an array of three post objects. <br />
            <code>get_posts($x = 1)</code> will return an array of nine post objects. It accepts
            a parameter integer value, which is the offset (times 9) to start from.
            The parameter is not required and defaults to 1. If no parameter or a parameter
            of 1 is passed, the 9 latest posts will be returned. If a parameter of 2 is
            passed, the 10th through the 17th latest posts will be returned. If there
            are no available posts, nothing is returned. If there are some posts,
            but not 9, some posts will be returned, and the function will not die.
          </p>
          <pre class='php'>
            <code>
$latest = Post:get_recent_posts();
//returns
Array (
  [1] => Array (
    [title] => Getting Started
    [date] => January 21, 2021
    [description] => An Intro to this system
    [link] => blog/2021-01-21-Getting-Started
  )
  ...
  [3] => Array (
    [title] => Hello, World!
    [date] => January 29, 2021
    [description] => Just dropping in to say hi!
    [link] => blog/2021-01-19-Hello-World
  )
)

$page2posts = Post::get_posts(2);
//returns
Array (
  [10] => Array (
    [title] => Getting Started
    [date] => January 21, 2021
    [description] => An Intro to this system
    [link] => blog/2021-01-21-Getting-Started
  )
...
  [17] => Array (
    [title] => Hello, World!
    [date] => January 29, 2021
    [description] => Just dropping in to say hi!
    [link] => blog/2021-01-19-Hello-World
  )
)
            </code>
          </pre>
          <p class='subtitle'>Get Post Information</p>
          <p>
            To get information about a post without retrieving the whole post object,
            <code>get_post_meta($file)</code> can be used. The function accepts the <code>$file</code>
            parameter, which is a string of the filename, with or without the file extension,
            without the leading folder name. If a file is found, an array of details
            is returned (see below). If a file is not found, <code>false</code> is returned.
          </p>
          <pre class='php'>
            <code>
$file = '2021-01-20-Documentation.php';
$post_details = Post::get_post_meta($file);
//returns
Array (
  [title] => Documentation
  [date] => January 20, 2021
  [description] => Topik Documentation
  [link] => blog/2021-01-20-Documentation
)
            </code>
          </pre>
          <hr />
          <p class='subtitle'>Using The Post Object</p>
          <p>
            The Post object has a number of available properties.
          </p>
          <pre class='php'>
            <code>
Post Object (
  [title] => Documentation
  [content] => Hello, this is an introduction to this system.
  [description] => Topik Documentation
  [raw_date] => 2021/01/20
  [format_date] => January 20, 2021
  [link] => blog/2021-01-20-Documentation
  [next_link] => 2021-01-21-Getting-Started.php
  [prev_link] => 2021-01-19-Hello-World.php
)
            </code>
          </pre>
          <p>
            To use any of these properties, access them with the arrow syntax.
          </p>
          <pre class='php'>
            <code>
$post->title;
            </code>
          </pre>
        </section>
        <section id='content'>
          <h3 class='is-size-3'>Content</h3>
          <p>
            Content is stored in files in the "posts" directory. Files have a strict
            naming convention that allows Topik to sort by new and link canonical
            posts. The naming convention is as follows:
          </p>
          <code>YYYY-MM-DD-Title-With_Underscores-or-hyphens.php</code>
          <p>
            The date helps the <code>get_posts()</code> function and related functions
            sort by date, and helps retrieve adjacent posts. The title convention
            makes saving posts easier and helps with URLs. The easy to read URLs
            is better for SEO and UX.
          </p>
          <hr />
          <p class='subtitle'>File Content</p>
          <p>
            At the top of your post, there should be opening PHP tags and 3 variables:
            the post title (string), description (string), and date (string), as shown in the below example:
          </p>
          <pre class='php'>
            <code>
&lt;?php
$title = "Test";
$description = "A test post";
$date = "2021/01/01";
?&gt;
            </code>
          </pre>
          <p>
            All variables must be strings. The date can be written in any format because
            it will be compiled to local format when the post is generated for viewing. <br /><br />
            After the initial variables are declared, the rest of the file's content
            can be in HTML or plain text and will be the content displayed in the final view.
          </p>
        </section>
        <section id='customization'>
          <h3 class='is-size-3'>Customization</h3>
          <p>
            The package you receive will have very little styling and scripts and no images.
            Everything will show up with only the most basic things to get you going.
            The idea here is to have you, the developer or designer, customize the
            software to fit your needs. Everything outside of the Post class and posts directory is a
            suggestion. You have the power to customize output, styles, and functionality.
            The Post class is extendable, so you can use the functions already there
            to build a search function or a random post function or even categories.
            The world is your oyster. Well, this project is, at least.<br />
            But for starters, Topik is set up to at least let you add in a style
            sheet and JavaScript by enclosing the style and script tags in the header,
            which gets loaded with every page. It ships with a CDN call to <a href='https://bulma.io' target='_blank'>Bulma</a>,
            and all the included markup will get you set up nicely with that, but
            by no means is it necessary. If you want to strip down to just the core (index.php, blog.php, Post.php, posts.php, and the posts directory) and
            rebuild, you totally can, and I think you <strong>should</strong>, but you don't <strong>have to</strong>.<br />
            To read up on customization, take a look at <a href='<?php echo $base; ?>blog/2021-01-20-Documentation'>the blog post on it.</a>
          </p>
        </section>
        <section id='help'>
          <h3 class='is-size-3'>Help</h3>
          <p>
            For additional help, feel free to message me at <a href='mailto:nate@natenorthway.com'>nate@natenorthway.com</a>.
            Please keep in mind that this is a side project of mine, and though I'd
            love to see it thrive, I'm not making money from this and thus, won't
            be able to pay as close attention to it as I might want to. Additionally,
            if you'd like to contribute, I'd love to hear from you, too.
          </p>
        </section>
      </div>
    </div>
  </div>
</div>
<?php include 'footer.php'; ?>
